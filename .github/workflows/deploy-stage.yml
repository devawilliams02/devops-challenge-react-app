name: Deploy to Stage

on:
  push:
    branches: [ stage ]

jobs:
  deploy:
    name: Deploy to Stage Environment
    runs-on: ubuntu-latest
    environment: stage

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '15'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Build Application
        run: npm run build
        env:
          REACT_APP_ENV: stage

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false  # avoid ::debug wrapper output

      - name: Terraform Init
        working-directory: terraform/environments/stage
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform/environments/stage
        run: terraform apply -auto-approve

      # Get S3 bucket name from Terraform outputs
      - name: Get website bucket name
        id: tf_output
        working-directory: terraform/environments/stage
        shell: bash
        run: |
          set -euo pipefail
          BUCKET_NAME="$(terraform output -raw website_bucket_name | tr -d '\r')"
          echo "bucket_name=${BUCKET_NAME}" >> "$GITHUB_OUTPUT"

      - name: Deploy to S3
        shell: bash
        run: |
          echo "Deploying to bucket: ${{ steps.tf_output.outputs.bucket_name }}"
          aws s3 sync build/ "s3://${{ steps.tf_output.outputs.bucket_name }}/" --delete

      # Get CloudFront distribution ID and invalidate cache
      - name: Get CloudFront Distribution ID
        id: cloudfront
        working-directory: terraform/environments/stage
        shell: bash
        run: |
          set -euo pipefail
          DIST_ID="$(terraform output -raw cloudfront_distribution_id | tr -d '\r')"
          echo "distribution_id=${DIST_ID}" >> "$GITHUB_OUTPUT"

      - name: Invalidate CloudFront Cache
        shell: bash
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "${{ steps.cloudfront.outputs.distribution_id }}" \
            --paths "/*"

      - name: Deployment Complete
        working-directory: terraform/environments/stage
        shell: bash
        run: |
          echo "‚úÖ Deployment to Stage environment successful!"
          echo -n "üåê CloudFront URL: "
          terraform output -raw cloudfront_domain_name | tr -d '\r'

